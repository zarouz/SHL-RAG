import os
from pathlib import Path
from dotenv import load_dotenv, find_dotenv # Import find_dotenv

# Define project root relative to this file
project_root = Path(__file__).parent.parent

# --- Environment Variable Loading ---
# Attempt to load .env file for local development using find_dotenv.
# In App Engine, variables are injected directly and os.getenv below will read them.
dotenv_path = find_dotenv()
if dotenv_path:
    print(f"Attempting to load environment variables from: {dotenv_path}")
    load_dotenv(dotenv_path=dotenv_path)
else:
    print("No .env file found, relying on system environment variables (or App Engine injected variables).")


# --- Model Configuration ---
# Path to the fine-tuned sentence transformer model
MODEL_PATH = project_root / "shl_finetuned_mpnet_model_H100"
# Dimension of the embeddings generated by the model
EMBEDDING_DIMENSION = 768 # From create_store_embeddings.py

# --- Gemini Configuration ---
# Ensure GEMINI_API_KEY is set in your .env file or app.yaml
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_MODEL_NAME = "gemini-1.5-flash-latest" # Or specific flash version if needed

# --- Database Configuration (Fetched from environment) ---
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST", "localhost") # Default to localhost if not set (Used for local TCP connection)
DB_PORT = os.getenv("DB_PORT", "5432")     # Default to 5432 if not set (Used for local TCP connection)
DB_TABLE_NAME = "shl_embeddings"           # Table created by create_store_embeddings.py
# Cloud SQL Instance Connection Name (Used for Cloud Run Unix Socket connection)
# e.g., "your-project:your-region:your-instance"
CLOUD_SQL_INSTANCE_CONNECTION_NAME = os.getenv("CLOUD_SQL_INSTANCE_CONNECTION_NAME")

# --- GCS Model Configuration (for App Engine deployment) ---
GCS_MODEL_BUCKET = os.getenv("GCS_MODEL_BUCKET") # e.g., "ml-modelo"
GCS_MODEL_BLOB_NAME = os.getenv("GCS_MODEL_BLOB_NAME") # e.g., "shl_model_h100.zip"

# --- Retriever Configuration ---
# Number of relevant chunks to retrieve from the database
TOP_K_RETRIEVAL = 10 # Max recommendations requested

# --- API Configuration ---
API_HOST = "0.0.0.0"
API_PORT = 8001 # Changed from 8000 to avoid conflict

# --- Data Configuration ---
# Although we retrieve from DB, might be useful for reference or other scripts
CORPUS_FILE = project_root / "processed_shl_chunks.jsonl"

# --- Device Preference for Model Loading ---
DEVICE_PREFERENCE = "cuda" # Try "cuda", then "mps", fallback to "cpu"

# --- Validation ---
def validate_config():
    """Checks if essential configuration variables are set."""
    essential_vars = {
        "MODEL_PATH": MODEL_PATH,
        "GEMINI_API_KEY": GEMINI_API_KEY,
        "DB_NAME": DB_NAME,
        "DB_USER": DB_USER,
        # DB_PASSWORD is read from secret file in retriever.py for Cloud Run
        # CLOUD_SQL_INSTANCE_CONNECTION_NAME is needed for Cloud Run
        "CLOUD_SQL_INSTANCE_CONNECTION_NAME": CLOUD_SQL_INSTANCE_CONNECTION_NAME,
    }
    # Check if running in Cloud Run (presence of K_SERVICE env var is a good indicator)
    is_cloud_run = os.getenv("K_SERVICE") is not None

    missing = []
    for name, value in essential_vars.items():
        # Skip DB_PASSWORD check here as it's handled differently in Cloud Run
        if name == "DB_PASSWORD" and is_cloud_run:
            continue
        # CLOUD_SQL_INSTANCE_CONNECTION_NAME is only essential for Cloud Run
        if name == "CLOUD_SQL_INSTANCE_CONNECTION_NAME" and not is_cloud_run:
            continue
        # Check other essential vars
        if value is None or (isinstance(value, Path) and not value.exists()):
            missing.append(name)


    if not MODEL_PATH.exists():
         print(f"Warning: Model path does not exist: {MODEL_PATH}")
         # Don't add to missing if it's just a warning for now, retriever will handle loading error

    if GEMINI_API_KEY is None:
        print("Warning: GEMINI_API_KEY is not set in environment variables.")
        # Add to missing if critical
        if "GEMINI_API_KEY" not in missing: missing.append("GEMINI_API_KEY")

    if DB_NAME is None or DB_USER is None or DB_PASSWORD is None:
         print("Warning: One or more DB credentials (DB_NAME, DB_USER) are not set in environment variables.")
         # Add to missing if critical
         db_missing = [name for name, value in [('DB_NAME', DB_NAME), ('DB_USER', DB_USER)] if value is None]
         missing.extend(db_missing)
         # Check for password/instance name based on environment
         if is_cloud_run and CLOUD_SQL_INSTANCE_CONNECTION_NAME is None:
             print("Warning: CLOUD_SQL_INSTANCE_CONNECTION_NAME is not set (required for Cloud Run DB connection).")
             missing.append("CLOUD_SQL_INSTANCE_CONNECTION_NAME")
         elif not is_cloud_run and DB_PASSWORD is None:
             print("Warning: DB_PASSWORD is not set (required for local DB connection).")
             missing.append("DB_PASSWORD")


    if missing:
        # Use set to remove potential duplicates before printing
        unique_missing = sorted(list(set(missing)))
        print(f"\n--- CONFIGURATION ERRORS ---")
        print(f"The following essential configuration variables are missing or invalid:")
        for var_name in unique_missing:
             print(f"- {var_name}")
        print("Please ensure they are set correctly in your .env file (for local) or Cloud Run service environment variables/secrets.")
        print(f"Current working directory: {os.getcwd()}")
        print("----------------------------\n")
        return False
    else:
        print("\n--- Configuration Loaded Successfully ---")
        print(f"Model Path: {MODEL_PATH}")
        print(f"Gemini Model: {GEMINI_MODEL_NAME}")
        if is_cloud_run:
            print(f"DB Connection: Via Unix Socket (Instance: {CLOUD_SQL_INSTANCE_CONNECTION_NAME})")
        else:
            print(f"DB Connection: TCP to {DB_HOST}:{DB_PORT}")
        print(f"DB Name: {DB_NAME}")
        print(f"DB User: {DB_USER}")
        print(f"DB Table: {DB_TABLE_NAME}")
        print(f"Device Preference: {DEVICE_PREFERENCE}")
        print("---------------------------------------\n")
        return True

# Run validation when the module is imported
IS_CONFIG_VALID = validate_config()

if __name__ == "__main__":
    # Example of how to access config variables
    print("\nRunning config.py directly:")
    if IS_CONFIG_VALID:
        print("Configuration is valid.")
        print(f"Retriever will fetch top {TOP_K_RETRIEVAL} results.")
    else:
        print("Configuration is invalid. Please check errors above.")
